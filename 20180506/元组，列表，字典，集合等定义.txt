1、
列表： my_list = [1, 2, 3],可变有序
元组： my_tuple = (1, 2, 3)，不可变有序，比列表安全
字典：dic={1:22,2:11,33:223}，可变无序，可以包括任意类型
集合：set={1,2,3,4,5}，无序不重复集合，
列表是可变的，而元组是不可变的。这是在 Python 语言中二者唯一的差别：
列表有一个 append() 的方法来添加更多的元素，而元组却没有这个方法。
元素不可变：元组，字符串。
元素可变：列表，字典


2、列表（list） 
定义一个列表使用一对中(方)括号”[ ] “：python内置的一种数据类型是列表：list是一种有序的数据集合，可以随意的添加和删除其中的数据。

L.append(var)          #追加元素
L.insert(index,var)
L.pop(var)               #返回最后一个元素，并从list中删除之
L.remove(var)            #删除第一次出现的该元素
L.count(var)             #该元素在列表中出现的个数
L.index(var)             #该元素的位置,无则抛异常
L.extend(list6)         #追加list６，即合并list到L上,这里注意，使用extend函数可以一次在一个列表中插入任意多个值，而不必须每次只使用append()一次一值的插入
L.sort()        #排序
L.reverse()     #倒序
del L[1]        #删除指定下标的元素
del L[1:3]      #删除指定下标范围的元素


3、元组（Tuple） 
定义一个元组使用一对小(圆)括号”( ) “：
元组也是一种有序列表，虽然tuple和list非常之类似，但是list初始化之后使可以改变的，但是，元组一旦初始化之后就不可以改变。这点与Python中的字符串类似，所以我们说元组和字符串都是不可变的序列。

元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组。

元组的内置函数： 
1.比较两个元组元素：cmp(tuple1,tuple2)相等的话返回0，不相等返回1； 
2.计算元组的长度：len(tuple 
3.返回元组中的最大值最小值：max(tuple),min(tuple)； 
4.将列表转换成元组：Tuple = tuple(list)


4、字典（Dict） 
定义 Dictionary 使用一对大(花)括号” { } ”。 
字典(Dictionary) 是 Python 的内置数据类型之一，它定义了键和值之间一对一的关系,但它们是以无序的方式储存的。字典中的“值”通过键来引用。

与列表区别：字典是无序的，在字典中通过键来访问成员。 
字典是可变的，可以包含任何其他类型。

字典内置函数；
dic.clear()清空字典 
dic.keys()获得键的列表 
dic.values()获得值的列表 
dic.copy()复制字典 
dic.pop(k)删除键k 
dic.get(k)获得键k的值 
dic.update()更新成员，若成员不存在，相当于加入 
dic.items()获得由键和值组成的列表

5、集合（Set） 
Python的集合(set)和其他语言类似, 是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素.

#定义一个集合
set1 = {1, 2, 3, 4, 5}
# 或者使用 set 函数
list1 = [6, 7, 7, 8, 8, 9]
set2 = set(list1)
set2.add(10) # 添加新元素
print set2 # set([8, 9, 6, 7]) 去掉重复内容,而且是无序的
set3 = frozenset(list1)    #固定集合
set3.add(10) # 固定集合不能添加元素
#方法（所有的集合方法）：
s.issubset(t) #如果s是t的子集,返回True，否则返回False
s.issuperset(t) #如果s是t的超集,返回True，否则返回False
s.union(t) #返回一个新集合, 该集合是s和t的并集
s.intersection(t) #返回一个新集合, 该集合是s和t的交集
s.difference(t) #返回一个新集合, 该集合是s的成员, 但不是t的成员, 即返回s不同于t的元素
s.symmetric_defference(t) #返回所有s和t独有的(非共同拥有)元素集合
s.copy() #返回一个s的浅拷贝, 效率比工厂要好
#方法（仅适用于可变集合）:以下方法参数必须是可哈希的
s.update(t) #用t中的元素 修改s，即s现在包含s或t的成员
s.intersection_update(t) #s中的成员是共同属于s和t的元素
s.difference_update(t) #s中的成员是属于s但不包含在t中的元素
s.symmetric_difference_update(t) #s中的成员更新为那些包含在s或t中，但不是s和t共有的元素
s.add(obj) #在集合s中添加对象obj
s.remove(obj) #从集合s中删除对象obj，如果obj不是集合s中的元素（obj not in s）,将引发keyError错误
s.discard(obj) #如果obj是集合s中的元素，从集合s中删除对象obj
s.pop() #删除集合s中得任意一个对象，并返回它
s.clear() #删除集合s中的所有元素
## 集合有并集，交集，求差操作
## 并集：intersection() 方法返回一个新集合，包含在两个集合中同时出现的所有元素。
## 交集：union() 方法返回一个新集合，包含在两个 集合中出现的元素。
## 差集：difference() 方法返回的新集合中，包含所有在 集合A出现但未在集合B中的元素。
## symmetric_difference() 方法返回一个新集合，包含所有只在其中一个集合中出现的元素。
# 删除元素
set2.discard(6) # 当元素不存在时,不会引发异常
set2.remove(6) # 与discard的区别在于，如果没有要删除的元素，remove会引发一个异常
set2.pop() # 因为set是无序的，所以pop会随机的从set中删除一个元素

